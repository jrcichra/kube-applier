// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/jrcichra/kube-applier/run (interfaces: BatchApplierInterface)

package run

import (
	gomock "github.com/golang/mock/gomock"
)

// MockBatchApplierInterface is a mock of BatchApplierInterface interface
type MockBatchApplierInterface struct {
	ctrl     *gomock.Controller
	recorder *MockBatchApplierInterfaceMockRecorder
}

// MockBatchApplierInterfaceMockRecorder is the mock recorder for MockBatchApplierInterface
type MockBatchApplierInterfaceMockRecorder struct {
	mock *MockBatchApplierInterface
}

// NewMockBatchApplierInterface creates a new mock instance
func NewMockBatchApplierInterface(ctrl *gomock.Controller) *MockBatchApplierInterface {
	mock := &MockBatchApplierInterface{ctrl: ctrl}
	mock.recorder = &MockBatchApplierInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockBatchApplierInterface) EXPECT() *MockBatchApplierInterfaceMockRecorder {
	return _m.recorder
}

// Apply mocks base method
func (_m *MockBatchApplierInterface) Apply(_param0 int, _param1 []string) ([]ApplyAttempt, []ApplyAttempt) {
	ret := _m.ctrl.Call(_m, "Apply", _param0, _param1)
	ret0, _ := ret[0].([]ApplyAttempt)
	ret1, _ := ret[1].([]ApplyAttempt)
	return ret0, ret1
}

// Apply indicates an expected call of Apply
func (_mr *MockBatchApplierInterfaceMockRecorder) Apply(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Apply", arg0, arg1)
}
